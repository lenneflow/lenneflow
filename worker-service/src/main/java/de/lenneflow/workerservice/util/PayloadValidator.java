package de.lenneflow.workerservice.util;

import de.lenneflow.workerservice.dto.ManagedClusterDTO;
import de.lenneflow.workerservice.dto.NodeGroupDTO;
import de.lenneflow.workerservice.dto.UnmanagedClusterDTO;
import de.lenneflow.workerservice.enums.CloudProvider;
import de.lenneflow.workerservice.exception.InternalServiceException;
import de.lenneflow.workerservice.exception.PayloadNotValidException;
import de.lenneflow.workerservice.model.AccessToken;
import de.lenneflow.workerservice.model.CloudCredential;
import de.lenneflow.workerservice.model.KubernetesCluster;
import de.lenneflow.workerservice.repository.AccessTokenRepository;
import de.lenneflow.workerservice.repository.CloudCredentialRepository;
import de.lenneflow.workerservice.repository.KubernetesClusterRepository;
import org.springframework.stereotype.Component;

@Component
public class PayloadValidator {

    final KubernetesClusterRepository kubernetesClusterRepository;
    final AccessTokenRepository accessTokenRepository;
    final CloudCredentialRepository cloudCredentialRepository;


    public PayloadValidator(KubernetesClusterRepository kubernetesClusterRepository, AccessTokenRepository accessTokenRepository, CloudCredentialRepository cloudCredentialRepository) {
        this.kubernetesClusterRepository = kubernetesClusterRepository;
        this.accessTokenRepository = accessTokenRepository;
        this.cloudCredentialRepository = cloudCredentialRepository;
    }


    public void validate(KubernetesCluster kubernetesCluster) {
        if (kubernetesCluster.getUid() == null || kubernetesCluster.getUid().isEmpty()) {
            throw new InternalServiceException("Uuid was not generated by the system");
        }

    }

    public void validate(NodeGroupDTO nodeGroupDTO) {
        if (nodeGroupDTO.getDesiredNodeCount() < 1) {
            throw new PayloadNotValidException("DesiredNodeCount is required");
        }
        if (nodeGroupDTO.getMinNodeCount() < 1) {
            throw new PayloadNotValidException("MinimumNodeCount is required");
        }
        if (nodeGroupDTO.getMaxNodeCount() < 1) {
            throw new PayloadNotValidException("MaximumNodeCount is required");
        }
        if(nodeGroupDTO.getClusterUid() == null || nodeGroupDTO.getClusterUid().isEmpty()) {
            throw new PayloadNotValidException("ClusterUid is required");
        }
        KubernetesCluster cluster = kubernetesClusterRepository.findByUid(nodeGroupDTO.getClusterUid());
        if (cluster == null) {
            throw new PayloadNotValidException("Cluster UID is not valid. Please provide a valid cluster UID");
        }
    }

    public void validate(ManagedClusterDTO managedClusterDTO) {

        if (managedClusterDTO.getClusterName() == null || managedClusterDTO.getClusterName().isEmpty()) {
            throw new PayloadNotValidException("KubernetesCluster Name is required");
        }
        if (managedClusterDTO.getRegion() == null || managedClusterDTO.getRegion().isEmpty()) {
            throw new PayloadNotValidException("Region is required");
        }
        if (managedClusterDTO.getKubernetesVersion() == null || managedClusterDTO.getKubernetesVersion().isEmpty()) {
            throw new PayloadNotValidException("KubernetesVersion is required");
        }
        if (managedClusterDTO.getCloudProvider() == null || managedClusterDTO.getCloudProvider().toString().isEmpty()) {
            throw new PayloadNotValidException("CloudProvider is required");
        }
        if (managedClusterDTO.getDesiredNodeCount() < 1) {
            throw new PayloadNotValidException("DesiredNodeCount is required");
        }
        if (managedClusterDTO.getMinimumNodeCount() < 1) {
            throw new PayloadNotValidException("MinimumNodeCount is required");
        }
        if (managedClusterDTO.getMaximumNodeCount() < 1) {
            throw new PayloadNotValidException("MaximumNodeCount is required");
        }
        if (managedClusterDTO.getInstanceType() == null || managedClusterDTO.getInstanceType().isEmpty()) {
            throw new PayloadNotValidException("InstanceType is required");
        }
        if (managedClusterDTO.getAmiType() == null || managedClusterDTO.getAmiType().isEmpty()) {
            throw new PayloadNotValidException("AmiType is required");
        }
        if (managedClusterDTO.getSupportedFunctionTypes() == null || managedClusterDTO.getSupportedFunctionTypes().isEmpty()) {
            throw new PayloadNotValidException("SupportedFunctionTypes is required");
        }
        if (managedClusterDTO.getCloudCredentialUid() == null || managedClusterDTO.getCloudCredentialUid().isEmpty()) {
            throw new PayloadNotValidException("CloudCredentialUid is required");
        }

        CloudCredential foundCredential = cloudCredentialRepository.findByUid(managedClusterDTO.getCloudCredentialUid());
        if (foundCredential == null) {
            throw new PayloadNotValidException("The cloud credential UID is not correct. Please check your Cloud Credential");
        }
    }

    public void validate(UnmanagedClusterDTO unmanagedClusterDTO) {

        if (unmanagedClusterDTO.getClusterName() == null || unmanagedClusterDTO.getClusterName().isEmpty()) {
            throw new PayloadNotValidException("KubernetesCluster Name is required");
        }
        if (unmanagedClusterDTO.getSupportedFunctionTypes() == null || unmanagedClusterDTO.getSupportedFunctionTypes().isEmpty()) {
            throw new PayloadNotValidException("SupportedFunctionTypes is required");
        }
        if (unmanagedClusterDTO.getApiServerEndpoint() == null || unmanagedClusterDTO.getApiServerEndpoint().isEmpty()) {
            throw new PayloadNotValidException("ApiServerEndpoint is required");
        }
        if (unmanagedClusterDTO.getCloudProvider() == null || unmanagedClusterDTO.getCloudProvider().toString().isEmpty()) {
            throw new PayloadNotValidException("CloudProvider is required");
        }
        if (unmanagedClusterDTO.getCloudProvider() == CloudProvider.LOCAL) {
            if (unmanagedClusterDTO.getHostName() == null || unmanagedClusterDTO.getHostName().isEmpty()) {
                throw new PayloadNotValidException("HostName is required");
            }
            if (unmanagedClusterDTO.getKubernetesAccessTokenUid() == null || unmanagedClusterDTO.getKubernetesAccessTokenUid().isEmpty()) {
                throw new PayloadNotValidException("KubernetesAccessTokenUid is required");
            }
            AccessToken token = accessTokenRepository.findByUid(unmanagedClusterDTO.getKubernetesAccessTokenUid());
            if (token == null) {
                throw new PayloadNotValidException("The access token UID is not correct. Please enter a valid access token UID");
            }
        } else {
            if (unmanagedClusterDTO.getRegion() == null || unmanagedClusterDTO.getRegion().isEmpty()) {
                throw new PayloadNotValidException("Region is required");
            }
            if (unmanagedClusterDTO.getCloudCredentialUid() == null || unmanagedClusterDTO.getCloudCredentialUid().isEmpty()) {
                throw new PayloadNotValidException("CloudCredentialUid is required");
            }

            CloudCredential foundCredential = cloudCredentialRepository.findByUid(unmanagedClusterDTO.getCloudCredentialUid());
            if (foundCredential == null) {
                throw new PayloadNotValidException("The cloud credential UID is not correct. Please enter a valid cloud credential UID");
            }
        }
    }
}
