package de.lenneflow.workerservice.util;

import de.lenneflow.workerservice.enums.CloudProvider;
import de.lenneflow.workerservice.exception.InternalServiceException;
import de.lenneflow.workerservice.exception.PayloadNotValidException;
import de.lenneflow.workerservice.model.KubernetesCluster;
import de.lenneflow.workerservice.model.KubernetesCredential;
import de.lenneflow.workerservice.repository.KubernetesClusterRepository;
import de.lenneflow.workerservice.repository.KubernetesCredentialRepository;
import org.springframework.stereotype.Component;

@Component
public class PayloadValidator {

    final KubernetesClusterRepository kubernetesClusterRepository;
    final KubernetesCredentialRepository kubernetesCredentialRepository;

    public PayloadValidator(KubernetesClusterRepository kubernetesClusterRepository, KubernetesCredentialRepository kubernetesCredentialRepository) {
        this.kubernetesClusterRepository = kubernetesClusterRepository;
        this.kubernetesCredentialRepository = kubernetesCredentialRepository;
    }


    public void validate(KubernetesCluster kubernetesCluster) {
        checkMandatoryFields(kubernetesCluster);

    }

    private void checkMandatoryFields(KubernetesCluster kubernetesCluster) {
        KubernetesCredential credential = kubernetesCredentialRepository.findByUid(kubernetesCluster.getKubernetesCredentialUid());

        if(credential == null) {
            throw new PayloadNotValidException("A kubernetes credential object with the ID " + kubernetesCluster.getKubernetesCredentialUid() + "does not exist.");
        }

        if(kubernetesCluster.getCloudProvider() == null){
            throw new PayloadNotValidException("Cloud provider is required!");
        }

        if(kubernetesCluster.getClusterName() == null || kubernetesCluster.getClusterName().isEmpty()) {
            throw new PayloadNotValidException("KubernetesCluster Name is required");
        }

        if(kubernetesCluster.getUid() == null || kubernetesCluster.getUid().isEmpty()) {
            throw new InternalServiceException("Uuid was not generated by the system");
        }

        if(kubernetesCluster.getCloudProvider().equals(CloudProvider.LOCAL)){
            if(kubernetesCluster.getHostName() == null || kubernetesCluster.getHostName().isEmpty()) {
                throw new PayloadNotValidException("Host Name is required");
            }
            if(credential.getIpAddress() == null || credential.getIpAddress().isEmpty()) {
                throw new PayloadNotValidException("IP Address is required");
            }
        }else{
           if(kubernetesCluster.getRegion() == null || kubernetesCluster.getRegion().isEmpty()) {throw new PayloadNotValidException("Region is required");}
           if(kubernetesCluster.getRoleArn() == null || kubernetesCluster.getRoleArn().isEmpty()) {throw new PayloadNotValidException("Role Arn is required");}
           if(kubernetesCluster.getSubnetIds() == null || kubernetesCluster.getSubnetIds().isEmpty()) {throw new PayloadNotValidException("Subnet Ids are required");}
        }



    }

}
